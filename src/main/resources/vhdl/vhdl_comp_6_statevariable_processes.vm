######################################################
### Template for SOM-VHDL codegen.                 ###
### This is work in progress. Expect major changes.###
######################################################


-------------------------------------------------------------------------------------------------------
-- Dynamics processes
-------------------------------------------------------------------------------------------------------

#set( $sensitivityList = "sysparam_time_timestep " )
#foreach ($par in $state)
	#foreach ($regime in $regimes) 
		#if ($regime.dynamics.get($par.name))
			#set( $sensitivityList = $sensitivityList + "," + $regime.dynamics.get($par.name).SensitivityList)
		#end
	#end
	#if ($dynamics.get($par.name))
		#set( $sensitivityList = $sensitivityList + "," + $dynamics.get($par.name).SensitivityList)
	#end
#end

state_variable_process_dynamics_comb :process ($sensitivityList)
begin
#foreach ($par in $state)
	#foreach ($regime in $regimes) 
		#if ($regime.dynamics.get($par.name))
			#set( $foo = "statevariable_" + $par.type +  "_" + $regime.name +  "_" + $par.name + "_temp_1_next <= resize(statevariable_" + $par.type +  "_" + $par.name + "_in + (" + $regime.dynamics.get($par.name).Dynamics + ") * sysparam_time_timestep," + $par.integer + "," + $par.fraction + ");"  )
			$foo
		#end
	#end
	#if ($dynamics.get($par.name))
		#set( $foo = "statevariable_" + $par.type +  "_noregime_" + $par.name + "_temp_1_next <= resize(statevariable_" + $par.type +  "_" + $par.name + "_in + (" + $dynamics.get($par.name).Dynamics + ") * sysparam_time_timestep," + $par.integer + "," + $par.fraction + ");"  )
		$foo
	#end
#end
subprocess_dyn_int_pre_ready <= '1';
subprocess_dyn_int_ready <= '1';
subprocess_dyn_ready <= '1';
end process state_variable_process_dynamics_comb;

state_variable_process_dynamics_syn :process (CLK)
begin
if clk'event and clk = '1' then  
if subprocess_all_ready = '1' then  
#foreach ($par in $state)
	#foreach ($regime in $regimes) 
		#if ($regime.dynamics.get($par.name))
			#set( $foo = "statevariable_" + $par.type +  "_" + $regime.name +  "_" + $par.name + "_temp_1 <= statevariable_" + $par.type +  "_" + $regime.name +  "_" + $par.name + "_temp_1_next;"  )
			$foo
		#end
	#end
	#if ($dynamics.get($par.name))
		#set( $foo = "statevariable_" + $par.type +  "_noregime_" + $par.name + "_temp_1 <= statevariable_" + $par.type +  "_noregime_" + $par.name + "_temp_1_next;" )
		$foo
	#end
#end
end if;
end if;
end process state_variable_process_dynamics_syn;




------------------------------------------------------------------------------------------------------
-- State Variable Drivers
------------------------------------------------------------------------------------------------------
##process to drive each state variable
#set( $i = 0)
#foreach ($par in $state)

---------------------------------------------------------------------
-- State variable: $par.name Driver Process
---------------------------------------------------------------------
#set( $sensitivityList = "sysparam_time_timestep,reset_model"  )
#foreach ($event in $events)
#if ($event.effect.state.get($par.name))
#set( $sensitivityList = $sensitivityList + ", eventport_in_" + $event.name  )
#end
#end

#foreach ($event in $conditions)
#if ($event.effect.state.get($par.name))
#set( $sensitivityList = $sensitivityList + "," + $event.SENSITIVITYLIST )
#end
#end

#if ($regimes.size() > 0)
#set( $sensitivityList = $sensitivityList + ",current_regime_in_int,next_regime"  )

#foreach ($regime in $regimes) 

##then check for all onentry
#foreach ($event in $regime.conditions)
#if ($event.effect.state.get($par.name))
#set( $sensitivityList = $sensitivityList + "," + $event.SENSITIVITYLIST )
#end
#end


#if ($regime.dynamics.get($par.name))
#set( $sensitivityList = $sensitivityList + " ,statevariable_" + $par.type +  "_" + $regime.name + "_" + $par.name + "_temp_1, " + $regime.dynamics.get($par.name).SensitivityList  )
#end

#end
#end

#if ($dynamics.get($par.name))
#set( $sensitivityList = $sensitivityList + ", statevariable_" + $par.type +  "_noregime_" + $par.name + "_temp_1," + $dynamics.get($par.name).SensitivityList )
#end

#set( $sensitivityList = $sensitivityList.replace(" ","").replace(",,",","))








state_variable_process_comb_$i :process ($sensitivityList)



## FIRST CREATE THE TEMP SIGNALS
#set( $temps = 1)
#if ($dynamics.get($par.name))
#set( $foo = "variable statevariable_" + $par.type +  "_" + $par.name + "_temp_1 : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#set( $sensitivityList = $sensitivityList + ",statevariable_" + $par.type +  "_" + $par.name + "_temp_1"  )
#set( $temps = 2)
#end


#foreach ($event in $events)
#if ($event.effect.state.get($par.name))
#set( $foo = "variable statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#set( $sensitivityList = $sensitivityList + ",statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + ",eventport_in_" + $event.name  )
#set( $temps = $temps + 1)
#end
#end
#foreach ($event in $conditions)
#if ($event.effect.state.get($par.name))
#set( $foo = "variable statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#set( $sensitivityList = $sensitivityList + ",statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps  )
#set( $temps = $temps + 1)
#end
#end

##check for regime changes indicating onentry statechanges

#if ($regimes.size() > 0)

#foreach ($regime in $regimes) 

##then check for all onentry
#foreach ($onentry in $regime.onentrys)
#if ($onentry.effect.state.get($par.name))
#set( $foo = "variable statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#set( $temps = $temps + 1)
#end
#end

#end


#foreach ($regime in $regimes) 

##first check for a timederivative
#if ($regime.dynamics.get($par.name))
#set( $foo = "variable statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#set( $temps = $temps + 1)
#end

#foreach ($event in $regime.events)
#if ($event.effect.state.get($par.name))
#set( $foo = "variable statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#set( $sensitivityList = $sensitivityList + ",statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + ",eventport_in_" + $event.name  )
#set( $temps = $temps + 1)
#end
#end
#foreach ($event in $regime.conditions)
#if ($event.effect.state.get($par.name))
#set( $foo = "variable statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#set( $sensitivityList = $sensitivityList + ",statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps  )
#set( $temps = $temps + 1)
#end
#end

#end

#end

begin

##first check for a timederivative
#set( $temps = 1)
#if ($dynamics.get($par.name))
#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_temp_1 := statevariable_" + $par.type +  "_noregime_" + $par.name + "_temp_1;"  )
$foo
#set( $temps = 2)
#end

##then check for all events that drive this state
#set( $rep = "statevariable_" + $par.type +  "_" + $par.name + "_in" )
#set( $repWith = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + ($temps - 1))

#foreach ($event in $events)
#if ($event.effect.state.get($par.name))

#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := resize(" + $event.effect.state.get($par.name).replace($rep,$repWith) + "," + $par.integer + "," + $par.fraction + ");"  )
#set( $foo2 = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := statevariable_" + $par.type +  "_" + $par.name + "_temp_" + ($temps - 1) + ";" )
#set( $foo3 = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := statevariable_" + $par.type +  "_" + $par.name + "_in;" )
if eventport_in_$event.name = '1' then
	$foo
else
#if ($temps > 1 )
	$foo2
#else
	$foo3
#end
end if;
#set( $temps = $temps + 1)
#end
#end

##then check for all conditional events that drive this state
#foreach ($event in $conditions)
#if ($event.effect.state.get($par.name))
#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := resize(" + $event.effect.state.get($par.name).replace($rep,$repWith) + "," + $par.integer + "," + $par.fraction + ");"  )
#set( $foo2 = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := statevariable_" + $par.type +  "_" + $par.name + "_temp_" + ($temps - 1) + ";" )
#set( $foo3 = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := statevariable_" + $par.type +  "_" + $par.name + "_in;" )
if $event.condition then
	$foo
else
#if ($temps > 1 )
	$foo2
#else
	$foo3
#end
end if;
#set( $temps = $temps + 1)
#end
#end

##check for regimes

#foreach ($regime in $regimes) 

	
##first check for a timederivative
#if ($regime.dynamics.get($par.name))

if ( current_regime_in_int = $regime.name ) then
#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_temp_1 := statevariable_" + $par.type +  "_" + $regime.name +  "_" + $par.name + "_temp_1;"  )
$foo
end if;
#set( $temps = $temps + 1)
#else
if ( current_regime_in_int = $regime.name ) then
#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_temp_1 := resize(statevariable_" + $par.type +  "_" + $par.name + "_in ," + $par.integer + "," + $par.fraction + ");"  )
$foo
end if;
#end


##then check for all events that drive this state
#foreach ($event in $regime.events)
#if ($event.effect.state.get($par.name))
#set( $rep = "statevariable_" + $par.type +  "_" + $par.name + "_in" )
#set( $repWith = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + ($temps - 1))
#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := resize(" + $event.effect.state.get($par.name).replace($rep,$repWith) + "," + $par.integer + "," + $par.fraction + ");"  )
#set( $foo2 = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := statevariable_" + $par.type +  "_" + $par.name + "_temp_" + ($temps - 1) + ";" )
#set( $foo3 = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := statevariable_" + $par.type +  "_" + $par.name + "_in;" )
if ( current_regime_in_int = $regime.name ) AND eventport_in_$event.name = '1' then
	$foo
else
#if ($temps > 1 )
	$foo2
#else
	$foo3
#end
end if;
#set( $temps = $temps + 1)
#end
#end

##then check for all conditional events that drive this state
#foreach ($event in $regime.conditions)
#if ($event.effect.state.get($par.name))
#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := resize(" + $event.effect.state.get($par.name).replace($rep,$repWith) + "," + $par.integer + "," + $par.fraction + ");"  )
#set( $foo2 = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := statevariable_" + $par.type +  "_" + $par.name + "_temp_" + ($temps - 1) + ";" )
#if ($temps == 1)
#set( $foo2 = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := statevariable_" + $par.type +  "_" + $par.name +  "_in;" )
#end
if ( current_regime_in_int = $regime.name ) AND $event.condition then
	$foo
else
#if ($temps > 1 )
	$foo2
#else
	$foo3
#end
end if;
#set( $temps = $temps + 1)
#end
#end


#end


##check for regime changes indicating onentry statechanges

#if ($regimes.size() > 0)


#foreach ($regime in $regimes) 
if (not ( current_regime_in_int = next_regime )) and ( next_regime = $regime.name ) then

##then check for all onentry
#foreach ($onentry in $regime.onentrys)
#if ($onentry.effect.state.get($par.name))
#set( $rep = "statevariable_" + $par.type +  "_" + $par.name + "_in" )
#set( $repWith = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + ($temps - 1))
#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := resize(" + $onentry.effect.state.get($par.name).replace($rep,$repWith) + "," + $par.integer + "," + $par.fraction + ");"  )
#set( $foo2 = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := statevariable_" + $par.type +  "_" + $par.name + "_temp_" + ($temps - 1) + ";" )
#if ($temps == 1)
#set( $foo2 = "statevariable_" + $par.type +  "_" + $par.name + "_temp_" + $temps + " := statevariable_" + $par.type +  "_" + $par.name +  "_in;" )
#end
$foo
else
$foo2
#set( $temps = $temps + 1)
#end
#end

end if;
#end

#end

#set( $foo = " statevariable_" + $par.type +  "_" + $par.name + "_next")
if reset_model = '1' then  
#if ($par.onstart == "0")
	$foo <= (others => '0');
#else
	$foo <= resize( $par.onstart , $par.integer , $par.fraction ) ;
#end
else
#set( $foo = " statevariable_" + $par.type +  "_" + $par.name + "_next <= statevariable_" + $par.type +  "_" + $par.name + "_temp_" + ($temps - 1) + ";")
$foo
end if;

end process;
##state_variable_process_syn_$i :process (clk,rst)
##begin

#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + ""  )
#set( $foo_new = " statevariable_" + $par.type +  "_" + $par.name + "_next")
##get onstart details for this variable
##if rst = '1' then  
#if ($par.onstart == "0")
##	$foo <= (others => '0');
#else
##	$foo <= resize( $par.onstart , $par.integer , $par.fraction ) ;
#end
##elsif clk'event and clk = '1' then  
##    if ce = '1' and step_once_go = '1' then 
##            $foo <= $foo_new after 1 ns;
##    end if;
##end if;


##end process;
#set( $i = $i + 1)
---------------------------------------------------------------------
#end

------------------------------------------------------------------------------------------------------




