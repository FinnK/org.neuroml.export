######################################################
### Template for SOM-VHDL codegen.                 ###
### This is work in progress. Expect major changes.###
######################################################

###################################################################
###################################################################
-- VHDL script automatically generated from a LEMS/SEM description
###################################################################
###################################################################


###################################################################
-- Standard Library Bits
###################################################################

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
library ieee_proposed;
use ieee_proposed.fixed_pkg.all;
use ieee_proposed.fixed_float_types.ALL;
use std.textio.all;
use ieee.std_logic_textio.all; -- if you're saving this type of signal
use IEEE.numeric_std.all;

###################################################################
###################################################################










 
entity top_synth is
    Port ( clk : in STD_LOGIC; --SYSTEM CLOCK, THIS ITSELF DOES NOT SIGNIFY TIME STEPS - AKA A SINGLE TIMESTEP MAY TAKE MANY CLOCK CYCLES
           rst : in STD_LOGIC; --SYNCHRONOUS RESET
           ce : in STD_LOGIC; --FOR THE SAKE OF COMPLETION ALL INTERNAL REGISTERS WILL BE CONNECTED TO THIS
		   step_once_go : in STD_LOGIC; --signals to the neuron from the core that a time step is to be simulated
		   reset_model : in STD_LOGIC;
		   step_once_complete : out STD_LOGIC; --signals to the core that a time step has finished
		   eventport_in_spike_aggregate : in STD_LOGIC_VECTOR(31 downto 0);
		   SelectSpikesIn :  in STD_LOGIC_VECTOR(159 downto 0);
		   
#foreach ($neuron in $NeuronComponents)
##Event Ports
    #foreach ($par in $neuron.eventports)
		#set( $foo = $neuron.name + "_" + "eventport_" + $par.direction +  "_" + $par.name + " : " + $par.direction + " STD_LOGIC;"  )
		$foo
	#end
	

##Parameters
	#foreach ($par in $neuron.parameters)
		#set( $foo = $neuron.name + "_" + "param_" + $par.type +  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##Exposures
	#foreach ($par in $neuron.exposures)
		#set( $foo = $neuron.name + "_" + "exposure_" + $par.type +  "_" + $par.name + " : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
	
	
##THE CHILDREN
#foreach ($child in $neuron.Children)

##Parameters
	#foreach ($par in $child.parameters)
		#set( $foo = $neuron.name + "_" + "param_" + $par.type  +  "_" + $child.name +  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##Exposures
	#foreach ($par in $child.exposures)
		#set( $foo = $neuron.name + "_" + "exposure_" + $par.type +  "_" + $child.name +  "_" + $par.name + " : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
		
			
##THE CHILDREN
#foreach ($child3 in $child.Children)


##Parameters
	#foreach ($par in $child3.parameters)
		#set( $foo = $neuron.name + "_" + "param_" + $par.type  +  "_" + $child.name +  "_" + $child3.name+  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##Exposures
	#foreach ($par in $child3.exposures)
		#set( $foo = $neuron.name + "_" + "exposure_" + $par.type +  "_" + $child.name +  "_" + $child3.name+  "_" + $par.name + " : out  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
					
					
##THE CHILDREN
#foreach ($child4 in $child3.Children)

	
##Parameters
	#foreach ($par in $child4.parameters)
		#set( $foo = $neuron.name + "_" + "param_" + $par.type  +  "_" + $child.name +  "_" + $child3.name+  "_" + $child4.name+  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##Exposures
	#foreach ($par in $child4.exposures)
		#set( $foo = $neuron.name + "_" + "exposure_" + $par.type +  "_" + $child.name +  "_" + $child3.name+  "_" + $child4.name+  "_" + $par.name + " : out  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
								
								
								
								
								
##THE CHILDREN
#foreach ($child5 in $child4.Children)

	
##Parameters
	#foreach ($par in $child5.parameters)
		#set( $foo = $neuron.name + "_" + "param_" + $par.type  +  "_" + $child.name +  "_" + $child3.name+  "_" + $child4.name+ "_" + $child5.name+  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##Exposures
	#foreach ($par in $child5.exposures)
		#set( $foo = $neuron.name + "_" + "exposure_" + $par.type +  "_" + $child.name +  "_" + $child3.name+  "_" + $child4.name+ "_" + $child5.name+  "_" + $par.name + " : out  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
		
		
#end

#end

#end
		
		
		
#end
#end
##System Parameters
           sysparam_time_timestep : in sfixed (-6 downto -22);
           sysparam_time_simtime : in sfixed (6 downto -22)
		   );
end top_synth;

---------------------------------------------------------------------












architecture top of top_synth is

signal step_once_complete_int : STD_LOGIC;
signal seven_steps_done : STD_LOGIC;
signal step_once_go_int : STD_LOGIC;
signal seven_steps_done_shot_done : STD_LOGIC;
signal seven_steps_done_shot : STD_LOGIC;
signal COUNT : unsigned(2 downto 0) := "000";

#foreach ($neuron in $NeuronComponents)
##Event Ports
    #foreach ($par in $neuron.eventports)
		#set( $foo = "signal " + $neuron.name + "_eventport_" + $par.direction +  "_" + $par.name + "_int : STD_LOGIC;"  )
		$foo
	#end
#end

## Go through each component and gets it definition here

#foreach ($neuron in $NeuronComponents)

component $neuron.name
    Port ( clk : in STD_LOGIC; --SYSTEM CLOCK, THIS ITSELF DOES NOT SIGNIFY TIME STEPS - AKA A SINGLE TIMESTEP MAY TAKE MANY CLOCK CYCLES
           rst : in STD_LOGIC; --SYNCHRONOUS RESET
           ce : in STD_LOGIC; --FOR THE SAKE OF COMPLETION ALL INTERNAL REGISTERS WILL BE CONNECTED TO THIS
		   step_once_go : in STD_LOGIC; --signals to the neuron from the core that a time step is to be simulated
		   reset_model : in STD_LOGIC;
		   step_once_complete : out STD_LOGIC; --signals to the core that a time step has finished
		   eventport_in_spike_aggregate : in STD_LOGIC_VECTOR(31 downto 0);
		   SelectSpikesIn :  in STD_LOGIC_VECTOR(159 downto 0);
		   
##Event Ports
    #foreach ($par in $neuron.eventports)
		#set( $foo = "eventport_" + $par.direction +  "_" + $par.name + " : " + $par.direction + " STD_LOGIC;"  )
		$foo
	#end
	
	
#if ($neuron.regimes.size() > 0)
		#set( $foo = "current_regime_in_stdlv : in STD_LOGIC_VECTOR(1 downto 0);"  )
		$foo
		#set( $foo = "current_regime_out_stdlv : out STD_LOGIC_VECTOR(1 downto 0); "  )
		$foo
#end

##Parameters
	#foreach ($par in $neuron.parameters)
		#set( $foo = "param_" + $par.type +  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##Exposures
	#foreach ($par in $neuron.exposures)
		#set( $foo = "exposure_" + $par.type +  "_" + $par.name + " : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
	
##StateVariables
	#foreach ($par in $neuron.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##StateVariables
	#foreach ($par in $neuron.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
##derivedVariables
	#foreach ($par in $neuron.derivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	#foreach ($par in $neuron.conditionalderivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
	
##THE CHILDREN
#foreach ($child in $neuron.Children)

##Parameters
	#foreach ($par in $child.parameters)
		#set( $foo = "param_" + $par.type  +  "_" + $child.name +  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##Exposures
	#foreach ($par in $child.exposures)
		#set( $foo = "exposure_" + $par.type +  "_" + $child.name +  "_" + $par.name + " : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
	
##StateVariables
	#foreach ($par in $child.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $child.name +  "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
##StateVariables
	#foreach ($par in $child.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $child.name +  "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
		
##derivedVariables
	#foreach ($par in $child.derivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	#foreach ($par in $child.conditionalderivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
			
##THE CHILDREN
#foreach ($child3 in $child.Children)


##Parameters
	#foreach ($par in $child3.parameters)
		#set( $foo = "param_" + $par.type  +  "_" + $child.name +  "_" + $child3.name+  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##Exposures
	#foreach ($par in $child3.exposures)
		#set( $foo = "exposure_" + $par.type +  "_" + $child.name +  "_" + $child3.name+  "_" + $par.name + " : out  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
##StateVariables
	#foreach ($par in $child3.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $child.name +  "_" + $child3.name+  "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
##StateVariables
	#foreach ($par in $child3.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $child.name +  "_" + $child3.name+  "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
##derivedVariables
	#foreach ($par in $child3.derivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $child3.name+ "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $child3.name+ "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end				
	#foreach ($par in $child3.conditionalderivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $child3.name+ "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $child3.name+ "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end				
	
					
##THE CHILDREN
#foreach ($child4 in $child3.Children)

	
##Parameters
	#foreach ($par in $child4.parameters)
		#set( $foo = "param_" + $par.type  +  "_" + $child.name +  "_" + $child3.name+  "_" + $child4.name+  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##Exposures
	#foreach ($par in $child4.exposures)
		#set( $foo = "exposure_" + $par.type +  "_" + $child.name +  "_" + $child3.name+  "_" + $child4.name+  "_" + $par.name + " : out  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
##StateVariables
	#foreach ($par in $child4.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $child.name +  "_" + $child3.name+  "_" + $child4.name+  "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
##StateVariables
	#foreach ($par in $child4.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $child.name +  "_" + $child3.name+  "_" + $child4.name+  "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
##derivedVariables
	#foreach ($par in $child4.derivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $child3.name+ "_" + $child4.name+ "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $child3.name+ "_" + $child4.name+ "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end						
	#foreach ($par in $child4.conditionalderivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $child3.name+ "_" + $child4.name+ "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $child3.name+ "_" + $child4.name+ "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end						
	
								
								
								
								
##THE CHILDREN
#foreach ($child5 in $child4.Children)

	
##Parameters
	#foreach ($par in $child5.parameters)
		#set( $foo = "param_" + $par.type  +  "_" + $child.name +  "_" + $child3.name+  "_" + $child4.name+ "_" + $child5.name+  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##Exposures
	#foreach ($par in $child5.exposures)
		#set( $foo = "exposure_" + $par.type +  "_" + $child.name +  "_" + $child3.name+  "_" + $child4.name+ "_" + $child5.name+  "_" + $par.name + " : out  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
##StateVariables
	#foreach ($par in $child5.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $child.name +  "_" + $child3.name+  "_" + $child4.name+ "_" + $child5.name+  "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
##StateVariables
	#foreach ($par in $child5.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $child.name +  "_" + $child3.name+  "_" + $child4.name+ "_" + $child5.name+  "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
##derivedVariables
	#foreach ($par in $child5.derivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $child3.name+ "_" + $child4.name+ "_" + $child5.name+   "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $child3.name+ "_" + $child4.name+  "_" + $child5.name+  "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end	
	#foreach ($par in $child5.conditionalderivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $child3.name+ "_" + $child4.name+ "_" + $child5.name+   "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child.name + "_" + $child3.name+ "_" + $child4.name+  "_" + $child5.name+  "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end	

	
		
		
		
#end

#end

#end
		
		
		
#end
## END THE CHILDREN
		   
##System Parameters
           sysparam_time_timestep : sfixed (-6 downto -22);
           sysparam_time_simtime : sfixed (6 downto -22)
		   );
end component;
#end


	signal sysparam_time_simtime_int  : sfixed ( 6 downto -22) := to_sfixed (0.0,6 , -22);
	signal sysparam_time_timestep_int : sfixed (-6 downto -22) := to_sfixed( $dt ,-6,-22);
	
	
#foreach ($child in $NeuronComponents)


#if ($child.regimes.size() > 0) 
		#set( $foo = "signal " + $child.name + "_current_regime_in_stdlv_int :  STD_LOGIC_VECTOR(1 downto 0);"  )
		$foo
		#set( $foo = "signal " + $child.name + "_current_regime_out_stdlv_int :  STD_LOGIC_VECTOR(1 downto 0); "  )
		$foo
#end


##StateVariables
	#foreach ($par in $child.state)
		#set( $foo = "signal " + $child.name + "_statevariable_" + $par.type +   "_" + $par.name + "_out_int : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
##StateVariables
	#foreach ($par in $child.state)
		#set( $foo = "signal " + $child.name + "_statevariable_" + $par.type +  "_" + $par.name + "_in_int : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
##derivedVariables
	#foreach ($par in $child.derivedvariables)
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_in_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	#foreach ($par in $child.conditionalderivedvariables)
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_in_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	

##THE CHILDREN
#foreach ($child2 in $child.Children)

	
##StateVariables
	#foreach ($par in $child2.state)
		#set( $foo = "signal " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
##StateVariables
	#foreach ($par in $child2.state)
		#set( $foo = "signal " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_in_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
		
##derivedVariables
	#foreach ($par in $child2.derivedvariables)
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_in_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	#foreach ($par in $child2.conditionalderivedvariables)
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_in_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
		
##THE CHILDREN
#foreach ($child3 in $child2.Children)
		
	##StateVariables
		#foreach ($par in $child3.state)
			#set( $foo = "signal " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
			$foo
		#end
	##StateVariables
		#foreach ($par in $child3.state)
			#set( $foo = "signal " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $par.name + "_in_int : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
			$foo
		#end
		
##derivedVariables
	#foreach ($par in $child3.derivedvariables)
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+ "_" + $par.name + "_in_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+ "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end			
	#foreach ($par in $child3.conditionalderivedvariables)
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+ "_" + $par.name + "_in_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+ "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end			
	
					
					
		
##THE CHILDREN
#foreach ($child4 in $child3.Children)

	
##StateVariables
	#foreach ($par in $child4.state)
		#set( $foo = "signal " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $child4.name+  "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
##StateVariables
	#foreach ($par in $child4.state)
		#set( $foo = "signal " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $child4.name+  "_" + $par.name + "_in_int : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
		
##derivedVariables
	#foreach ($par in $child4.derivedvariables)
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+  "_" + $child4.name+  "_" + $par.name + "_in_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+  "_" + $child4.name+  "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end		
	#foreach ($par in $child4.conditionalderivedvariables)
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+  "_" + $child4.name+  "_" + $par.name + "_in_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+  "_" + $child4.name+  "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end			
	
								
							
				
##THE CHILDREN
#foreach ($child5 in $child4.Children)
	
##StateVariables
	#foreach ($par in $child5.state)
		#set( $foo = "signal " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $child4.name+  "_" + $child5.name+  "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
##StateVariables
	#foreach ($par in $child5.state)
		#set( $foo = "signal " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $child4.name+ "_" + $child5.name+  "_" + $par.name + "_in_int : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
		
##derivedVariables
	#foreach ($par in $child5.derivedvariables)
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+  "_" + $child4.name+ "_" + $child5.name+  "_" + $par.name + "_in_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+  "_" + $child4.name+ "_" + $child5.name+  "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end			
	#foreach ($par in $child5.conditionalderivedvariables)
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+  "_" + $child4.name+ "_" + $child5.name+  "_" + $par.name + "_in_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
		#set( $foo = "signal " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+  "_" + $child4.name+ "_" + $child5.name+  "_" + $par.name + "_out_int :  sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end			
	
										

#end

#end

#end

#end
## END THE CHILDREN


#end	

	
	
##Timescale becomes the timestep - stored in DT

##Start and end times - stored in SIMLENGTH

begin

##instantiate each neuron

#foreach ($child in $NeuronComponents)
#set( $foo = $child.name + "_uut")
$foo : $child.name
    port map (	clk => clk,
				rst => rst,
				ce => ce,
		   step_once_go  => step_once_go_int,
		   reset_model => reset_model,
		   step_once_complete  => step_once_complete_int,
		   eventport_in_spike_aggregate => eventport_in_spike_aggregate,
		   SelectSpikesIn => SelectSpikesIn,
		   
##Event Ports
    #foreach ($par in $child.eventports)
		#set( $foo = "eventport_" + $par.direction +  "_" + $par.name + " => " + $child.name + "_" + "eventport_" + $par.direction + "_" + $par.name + "_int,"  )
		$foo
	#end

#if ($child.regimes.size() > 0)
		#set( $foo = "current_regime_in_stdlv => " + $child.name + "_current_regime_in_stdlv_int,"  )
		$foo
		#set( $foo = "current_regime_out_stdlv  => " + $child.name + "_current_regime_out_stdlv_int, "  )
		$foo
#end

##Parameters
	#foreach ($par in $child.parameters)
		#set( $foo = "param_" + $par.type +  "_" + $par.name + " =>  " + $child.name + "_param_" + $par.type +  "_" + $par.name + ","  )
		$foo
	#end

##Exposures
	#foreach ($par in $child.exposures)
		#set( $foo = "exposure_" + $par.type +  "_" + $par.name + " => " + $child.name + "_exposure_" + $par.type +  "_" + $par.name + "," )
		$foo
	#end
	
	
##StateVariables
	#foreach ($par in $child.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_out => " + $child.name + "_statevariable_" + $par.type +  "_" + $par.name + "_out_int,"  )
		$foo
	#end

##StateVariables
	#foreach ($par in $child.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_in => " + $child.name + "_statevariable_" + $par.type +  "_" + $par.name + "_in_int,"  )
		$foo
	#end

##derivedVariables
	#foreach ($par in $child.derivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $par.name + "_in =>  " + $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_in_int,"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $par.name + "_out =>  " + $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_out_int,"  )
		$foo
	#end
	#foreach ($par in $child.conditionalderivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $par.name + "_in =>  " + $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_in_int,"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $par.name + "_out =>  " + $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_out_int,"  )
		$foo
	#end
	
	
##THE CHILDREN
#foreach ($child2 in $child.Children)

##Parameters
#foreach ($par in $child2.parameters)
	#set( $foo = "param_" + $par.type  +  "_" + $child2.name +  "_" + $par.name + " => " + $child.name + "_param_" + $par.type  +  "_" + $child2.name +  "_" + $par.name + ","  )
	$foo
#end

##Exposures
#foreach ($par in $child2.exposures)
	#set( $foo = "exposure_" + $par.type +  "_" + $child2.name +  "_" + $par.name + " => " + $child.name + "_exposure_" + $par.type +  "_" + $child2.name +  "_" + $par.name + ","  )
	$foo
#end


##StateVariables
#foreach ($par in $child2.state)
	#set( $foo = "statevariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_out => " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_out_int,"  )
	$foo
#end
##StateVariables
#foreach ($par in $child2.state)
	#set( $foo = "statevariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_in => " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_in_int,"  )
	$foo
#end
	
##derivedVariables
	#foreach ($par in $child2.derivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $par.name + "_in =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name +  "_" + $par.name + "_in_int,"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type + "_" + $child2.name +  "_" + $par.name + "_out =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name +  "_" + $par.name + "_out_int,"  )
		$foo
	#end	
	#foreach ($par in $child2.conditionalderivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $par.name + "_in =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name +  "_" + $par.name + "_in_int,"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type + "_" + $child2.name +  "_" + $par.name + "_out =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name +  "_" + $par.name + "_out_int,"  )
		$foo
	#end	
	
		
##THE CHILDREN
#foreach ($child3 in $child2.Children)
##Parameters
#foreach ($par in $child3.parameters)
	#set( $foo = "param_" + $par.type  +  "_" + $child2.name +  "_" + $child3.name +  "_" + $par.name + " => " + $child.name + "_param_" + $par.type  +  "_" + $child2.name +  "_" + $child3.name +  "_" + $par.name + ","  )
	$foo
#end

##Exposures
#foreach ($par in $child3.exposures)
	#set( $foo = "exposure_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $par.name + " => " + $child.name + "_exposure_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $par.name + ","  )
	$foo
#end

##StateVariables
#foreach ($par in $child3.state)
	#set( $foo = "statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $par.name + "_out => " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $par.name + "_out_int,"  )
	$foo
#end
##StateVariables
#foreach ($par in $child3.state)
	#set( $foo = "statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $par.name + "_in => " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $par.name + "_in_int,"  )
	$foo
#end
		
##derivedVariables
	#foreach ($par in $child3.derivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+ "_" + $par.name + "_in =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+  "_" + $par.name + "_in_int,"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+  "_" + $par.name + "_out =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+  "_" + $par.name + "_out_int,"  )
		$foo
	#end		
	#foreach ($par in $child3.conditionalderivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+ "_" + $par.name + "_in =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+  "_" + $par.name + "_in_int,"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+  "_" + $par.name + "_out =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+  "_" + $par.name + "_out_int,"  )
		$foo
	#end		
	
							
							
##THE CHILDREN
#foreach ($child4 in $child3.Children)
##Parameters
#foreach ($par in $child4.parameters)
	#set( $foo = "param_" + $par.type  +  "_" + $child2.name +  "_" + $child3.name +  "_" + $child4.name +  "_" + $par.name + " => " + $child.name + "_param_" + $par.type  +  "_" + $child2.name +  "_" + $child3.name +  "_" + $child4.name +  "_" + $par.name + ","  )
	$foo
#end

##Exposures
#foreach ($par in $child4.exposures)
	#set( $foo = "exposure_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $child4.name +  "_" + $par.name + " => " + $child.name + "_exposure_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $child4.name +  "_" + $par.name + ","  )
	$foo
#end

##StateVariables
#foreach ($par in $child4.state)
	#set( $foo = "statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $child4.name +  "_" + $par.name + "_out => " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+   "_" + $child4.name + "_" + $par.name + "_out_int,"  )
	$foo
#end
##StateVariables
#foreach ($par in $child4.state)
	#set( $foo = "statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $child4.name +  "_" + $par.name + "_in => " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+   "_" + $child4.name + "_" + $par.name + "_in_int,"  )
	$foo
#end
	
##derivedVariables
	#foreach ($par in $child4.derivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+ "_" + $child4.name +   "_" + $par.name + "_in =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+   "_" + $child4.name +  "_" + $par.name + "_in_int,"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+   "_" + $child4.name +  "_" + $par.name + "_out =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+  "_" + $child4.name +   "_" + $par.name + "_out_int,"  )
		$foo
	#end		
	#foreach ($par in $child4.conditionalderivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+ "_" + $child4.name +   "_" + $par.name + "_in =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+   "_" + $child4.name +  "_" + $par.name + "_in_int,"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+   "_" + $child4.name +  "_" + $par.name + "_out =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+  "_" + $child4.name +   "_" + $par.name + "_out_int,"  )
		$foo
	#end		
	
							
							
									
##THE CHILDREN
#foreach ($child5 in $child4.Children)
##Parameters
#foreach ($par in $child5.parameters)
	#set( $foo = "param_" + $par.type  +  "_" + $child2.name +  "_" + $child3.name +  "_" + $child4.name +  "_" + $child5.name +  "_" + $par.name + " => " + $child.name + "_param_" + $par.type  +  "_" + $child2.name +  "_" + $child3.name +  "_" + $child4.name +  "_" + $child5.name +  "_" + $par.name + ","  )
	$foo
#end

##Exposures
#foreach ($par in $child5.exposures)
	#set( $foo = "exposure_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $child4.name +  "_" + $child5.name +  "_" + $par.name + " => " + $child.name + "_exposure_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $child4.name +  "_" + $child5.name +  "_" + $par.name + ","  )
	$foo
#end

##StateVariables
#foreach ($par in $child5.state)
	#set( $foo = "statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $child4.name +  "_" + $child5.name +  "_" + $par.name + "_out => " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+   "_" + $child4.name +  "_" + $child5.name + "_" + $par.name + "_out_int,"  )
	$foo
#end
##StateVariables
#foreach ($par in $child5.state)
	#set( $foo = "statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $child4.name +  "_" + $child5.name +  "_" + $par.name + "_in => " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+   "_" + $child4.name +  "_" + $child5.name + "_" + $par.name + "_in_int,"  )
	$foo
#end
##derivedVariables
	#foreach ($par in $child5.derivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+ "_" + $child4.name +  "_" + $child5.name +    "_" + $par.name + "_in =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+   "_" + $child4.name +  "_" + $child5.name +   "_" + $par.name + "_in_int,"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+   "_" + $child4.name +  "_" + $child5.name +   "_" + $par.name + "_out =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+  "_" + $child4.name +  "_" + $child5.name +   "_" + $par.name + "_out_int,"  )
		$foo
	#end		
	#foreach ($par in $child5.conditionalderivedvariables)
		#set( $foo = "derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+ "_" + $child4.name +  "_" + $child5.name +    "_" + $par.name + "_in =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+   "_" + $child4.name +  "_" + $child5.name +   "_" + $par.name + "_in_int,"  )
		$foo
		#set( $foo = "derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+   "_" + $child4.name +  "_" + $child5.name +   "_" + $par.name + "_out =>  " + $child.name + "_derivedvariable_" + $par.type + "_" + $child2.name + "_" + $child3.name+  "_" + $child4.name +  "_" + $child5.name +   "_" + $par.name + "_out_int,"  )
		$foo
	#end		
	
							
							
			
#end
#end
#end
#end
## END THE CHILDREN
	
##System Parameters
           sysparam_time_timestep => sysparam_time_timestep,
           sysparam_time_simtime => sysparam_time_simtime
		   );
		

#end




count_proc:process(clk)
  	begin 
      if rising_edge(clk) then  
			if (rst='1') then 
				COUNT <= "000";
				seven_steps_done <= '0';
			else
				if step_once_complete_int = '1'	then
					if (COUNT = "110") then
						seven_steps_done <= '1';
					else
						seven_steps_done <= '0';
						COUNT <= COUNT + 1;
						step_once_go_int <= '1';
					end if;
				elsif step_once_go = '1' then
					seven_steps_done <= '0';
					step_once_go_int <= '1';
					COUNT <= "000";
				else
					step_once_go_int <= '0';
				end if;
			end if;
		end if;
end process count_proc;



shot_process:process(clk)
begin
	if rising_edge(clk) then
			if (rst='1') then 
				seven_steps_done_shot <= '0';
			else
				if seven_steps_done = '1' and seven_steps_done_shot_done = '0' then
					seven_steps_done_shot <= '1';
					seven_steps_done_shot_done <= '1';
				elsif seven_steps_done_shot = '1' then
					seven_steps_done_shot <= '0';
				elsif seven_steps_done = '0' then
					seven_steps_done_shot <= '0';
					seven_steps_done_shot_done <= '0';
				end if;
			end if;
	end if;

end process shot_process;





store_state: process (clk)
   begin
      if rising_edge(clk) then  
         if (rst='1') then   
		


#foreach ($child in $NeuronComponents)
##StateVariables
	#foreach ($par in $child.state)
		#set( $foo =  $child.name + "_statevariable_" + $par.type +  "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");"  )
		$foo
	#end
##derivedvariables
	#foreach ($par in $child.derivedvariables)
		#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");"  )
		$foo
	#end
	#foreach ($par in $child.conditionalderivedvariables)
		#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");"  )
		$foo
	#end
	
	
	
	
#if ($child.regimes.size() > 0)
		#set( $foo = $child.name + "_current_regime_in_stdlv_int <= (others => '0');"  )
		$foo
#end

##THE CHILDREN
#foreach ($child2 in $child.Children)

		
	##StateVariables
		#foreach ($par in $child2.state)
			#set( $foo = $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");" )
			$foo
		#end
	##derivedvariables
		#foreach ($par in $child2.derivedvariables)
			#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");"  )
			$foo
		#end
		#foreach ($par in $child2.conditionalderivedvariables)
			#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");"  )
			$foo
		#end
		
		##THE CHILDREN
			#foreach ($child3 in $child2.Children)

				##StateVariables
					#foreach ($par in $child3.state)
						#set( $foo =  $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");" )
						$foo
					#end
				##derivedvariables
					#foreach ($par in $child3.derivedvariables)
						#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+  "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");"  )
						$foo
					#end
					#foreach ($par in $child3.conditionalderivedvariables)
						#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+  "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");"  )
						$foo
					#end
					
					
					#foreach ($child4 in $child3.Children)

						##StateVariables
							#foreach ($par in $child4.state)
								#set( $foo =  $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+"_" + $child4.name+  "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");" )
								$foo
							#end
						##derivedvariables
							#foreach ($par in $child4.derivedvariables)
								#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+"_" + $child4.name+   "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");"  )
								$foo
							#end
							#foreach ($par in $child4.conditionalderivedvariables)
								#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+"_" + $child4.name+   "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");"  )
								$foo
							#end
							
							
										#foreach ($child5 in $child4.Children)

											##StateVariables
												#foreach ($par in $child5.state)
													#set( $foo =  $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+"_" + $child4.name+  "_" + $child5.name+  "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");" )
													$foo
												#end
											##derivedvariables
												#foreach ($par in $child5.derivedvariables)
													#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+"_" + $child4.name+  "_" + $child5.name+ "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");"  )
													$foo
												#end
												#foreach ($par in $child5.conditionalderivedvariables)
													#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name + "_" + $child3.name+"_" + $child4.name+  "_" + $child5.name+ "_" + $par.name + "_in_int <= resize(to_sfixed (0,2,-2)," + $par.integer + " , " + $par.fraction + ");"  )
													$foo
												#end
												
												
												
										#end

					#end
			#end
#end
#end

#foreach ($neuron in $NeuronComponents)
##Event Ports
    #foreach ($par in $neuron.eventports)
		#set( $foo =  $neuron.name + "_eventport_" + $par.direction +  "_" + $par.name + "<= '0';"  )
		$foo
	#end
#end

		 
         elsif (ce='1' and seven_steps_done_shot='1') then

#foreach ($neuron in $NeuronComponents)
##Event Ports
    #foreach ($par in $neuron.eventports)
		#set( $foo =  $neuron.name + "_eventport_" + $par.direction +  "_" + $par.name + " <= " + $neuron.name + "_eventport_" + $par.direction +  "_" + $par.name + "_int;"  )
		$foo
	#end
#end

#foreach ($child in $NeuronComponents)
##StateVariables
	#foreach ($par in $child.state)
		#set( $foo =  $child.name + "_statevariable_" + $par.type +  "_" + $par.name + "_in_int <= " + $child.name + "_statevariable_" + $par.type +  "_" + $par.name + "_out_int;"  )
		$foo
	#end
##derivedvariables
	#foreach ($par in $child.derivedvariables)
		#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_in_int <= " + $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_out_int;"  )
		$foo
	#end
	#foreach ($par in $child.conditionalderivedvariables)
		#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_in_int <= " + $child.name + "_derivedvariable_" + $par.type +  "_" + $par.name + "_out_int;"  )
		$foo
	#end
	
	

#if ($child.regimes.size() > 0)
		#set( $foo = $child.name + "_current_regime_in_stdlv_int <= " + $child.name + "_current_regime_out_stdlv_int;"  )
		$foo
#end

##THE CHILDREN
#foreach ($child2 in $child.Children)

		
	##StateVariables
		#foreach ($par in $child2.state)
			#set( $foo = $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_in_int <= " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_out_int;"  )
			$foo
		#end
	##derivedvariables
		#foreach ($par in $child2.derivedvariables)
			#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_in_int <= " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_out_int;"  )
			$foo
		#end
		#foreach ($par in $child2.conditionalderivedvariables)
			#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_in_int <= " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $par.name + "_out_int;"  )
			$foo
		#end
		
		##THE CHILDREN
			#foreach ($child3 in $child2.Children)

				##StateVariables
					#foreach ($par in $child3.state)
						#set( $foo =  $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $par.name + "_in_int <= " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+  "_" + $par.name + "_out_int;"  )
						$foo
					#end
				##derivedvariables
					#foreach ($par in $child3.derivedvariables)
						#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+ "_" + $par.name + "_in_int <= " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+ "_" + $par.name + "_out_int;"  )
						$foo
					#end
					#foreach ($par in $child3.conditionalderivedvariables)
						#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+ "_" + $par.name + "_in_int <= " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+ "_" + $par.name + "_out_int;"  )
						$foo
					#end
					
					
					#foreach ($child4 in $child3.Children)

						##StateVariables
							#foreach ($par in $child4.state)
								#set( $foo =  $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+"_" + $child4.name+  "_" + $par.name + "_in_int <= " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+ "_" + $child4.name+  "_" + $par.name + "_out_int;"  )
								$foo
							#end
						##derivedvariables
							#foreach ($par in $child4.derivedvariables)
								#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+"_" + $child4.name+ "_" + $par.name + "_in_int <= " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+"_" + $child4.name+ "_" + $par.name + "_out_int;"  )
								$foo
							#end
							#foreach ($par in $child4.conditionalderivedvariables)
								#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+"_" + $child4.name+ "_" + $par.name + "_in_int <= " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+"_" + $child4.name+ "_" + $par.name + "_out_int;"  )
								$foo
							#end
							
							
							
										#foreach ($child5 in $child4.Children)

											##StateVariables
												#foreach ($par in $child5.state)
													#set( $foo =  $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+"_" + $child4.name+  "_" + $child5.name+  "_" + $par.name + "_in_int <= " + $child.name + "_statevariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+ "_" + $child4.name+ "_" + $child5.name+  "_" + $par.name + "_out_int;"  )
													$foo
												#end
											##derivedvariables
												#foreach ($par in $child5.derivedvariables)
													#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+"_" + $child4.name+ "_" + $child5.name+ "_" + $par.name + "_in_int <= " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+"_" + $child4.name+ "_" + $child5.name+ "_" + $par.name + "_out_int;"  )
													$foo
												#end
												#foreach ($par in $child5.conditionalderivedvariables)
													#set( $foo =  $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+"_" + $child4.name+ "_" + $child5.name+ "_" + $par.name + "_in_int <= " + $child.name + "_derivedvariable_" + $par.type +  "_" + $child2.name +  "_" + $child3.name+"_" + $child4.name+ "_" + $child5.name+ "_" + $par.name + "_out_int;"  )
													$foo
												#end
												
												
										#end

					#end
			#end
#end
#end
else

#foreach ($neuron in $NeuronComponents)
##Event Ports
    #foreach ($par in $neuron.eventports)
		#set( $foo =  $neuron.name + "_eventport_" + $par.direction +  "_" + $par.name + "<= '0';"  )
		$foo
	#end
#end

		
end if;
end if;
    

 end process store_state;
 
 
 step_once_complete <= seven_steps_done_shot;

end top;

###################################################################
###################################################################
