######################################################
### Template for SOM-VHDL codegen.                 ###
### This is work in progress. Expect major changes.###
######################################################

-------------------------------------------------------------------------------------------
-- Architecture Begins
-------------------------------------------------------------------------------------------

architecture RTL of $name is

#if ($name.contains("neuron_model"))
signal COUNT : unsigned(2 downto 0) := "000";

constant cNSpikeSources : integer := 32;	-- The number of spike sources.
constant cNOutputs		: integer := 32;	-- The number of Synapses in the neuron model.
constant cNSelectBits	: integer := 5;		-- Log2(NOutputs), rounded up.

component ParamMux
	generic( 
		NSpikeSources 	: integer := 32;	-- The number of spike sources.
		NOutputs		: integer := 32;	-- The number of Synapses in the neuron model.
		NSelectBits		: integer := 5);	-- Log2(NSpikeSources), rounded up.
	port(
		SpikeIn			: In  Std_logic_vector(NSpikeSources-1 downto 0);
		SelectIn		: In  Std_logic_vector((NOutputs*NSelectBits)-1 downto 0);
		SpikeOut		: Out Std_logic_vector((NOutputs-1) downto 0));
end component;
signal SpikeOut			: Std_logic_vector((cNOutputs-1) downto 0);

#end

---------------------------------------------------------------------
-- Derived Variables and Parameters
---------------------------------------------------------------------
##DerivedVariables
#foreach ($par in $derivedvariables)
#set( $foo = "signal derivedvariable_" + $par.type +  "_" + $par.name + " : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#end
#foreach ($cdvar in $conditionalderivedvariables)
#set( $foo = "signal derivedvariable_" + $cdvar.type +  "_" + $cdvar.name + " : sfixed (" + $cdvar.integer + " downto " + $cdvar.fraction + ");"  )
$foo
#end
##DerivedParameters
#foreach ($par in $derivedparameters)
#set( $foo = "signal derivedparameter_" + $par.type +  "_" + $par.name + " : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#end
---------------------------------------------------------------------


---------------------------------------------------------------------
-- State internal Variables
---------------------------------------------------------------------
##StateVariables
#foreach ($par in $state)
#set( $foo = "signal statevariable_" + $par.type +  "_" + $par.name + "_next : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#end
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Output Port internal Variables
---------------------------------------------------------------------
##OutputPorts
#foreach ($par in $eventports)
#if ($par.direction == "out")
#set( $foo = "signal eventport_" + $par.direction + "_" + $par.name + "_internal : std_logic := '0'; ")
$foo
#end
#end
---------------------------------------------------------------------


#if ($regimes.size() > 0)
---------------------------------------------------------------------
-- Regime State Machine Variables
---------------------------------------------------------------------
##Regimes
#set ($count = 0)
type regime_type is ( #foreach ($regime in $regimes) 
#if ($regime.default)
#set ($defaultRegime = $regime.name)
#end
#set ($count = $count + 1)
$regime.name 
#if ($count != $regimes.size())
, 
#end
#end 
);
signal current_regime_in_int: regime_type;
signal next_regime: regime_type;

function CONV_STDLV_TO_REGIME (DATA :std_logic_vector) return regime_type is
begin
  return regime_type'val(to_integer(unsigned(DATA)));
end CONV_STDLV_TO_REGIME;

function CONV_REGIME_TO_STDLV (regime :regime_type) return std_logic_vector is 
begin
  return std_logic_vector(to_unsigned(regime_type'pos(regime),2));
end CONV_REGIME_TO_STDLV;
---------------------------------------------------------------------
#end 


---------------------------------------------------------------------
-- Child Components
---------------------------------------------------------------------
##add definitions for all children
#foreach ($child in $Children)

component $child.name
    Port ( clk : in STD_LOGIC;
           rst : in STD_LOGIC;
           ce : in STD_LOGIC;
		   step_once_go : in STD_LOGIC;
		   reset_model : in STD_LOGIC;
##Event Ports
    #foreach ($par in $child.eventports)
		#set( $foo = "eventport_" + $par.direction +  "_" + $par.name + " : " + $par.direction + " STD_LOGIC;"  )
		$foo
	#end

##Parameters
	#foreach ($par in $child.parameters)
		#set( $foo = "param_" + $par.type +  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
##Requirements
	#foreach ($par in $child.requirements)
		#set( $foo = "requirement_" + $par.type +  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##Exposures
	#foreach ($par in $child.exposures)
		#set( $foo = "exposure_" + $par.type +  "_" + $par.name + " : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
##StateVariable
	#foreach ($par in $child.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
##StateVariable
	#foreach ($par in $child.state)
		#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
	
		#foreach ($child2 in $child.Children)
		
			##Parameters
			#foreach ($par in $child2.parameters)
				#set( $foo = "param_" + $par.type +  "_" + $child2.name + "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
				$foo
			#end
		
			##Exposures
			#foreach ($par in $child2.exposures)
				#set( $foo = "exposure_" + $par.type +  "_"+ $child2.name + "_" + $par.name + " : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
				$foo
			#end

			##StateVariable
			#foreach ($par in $child2.state)
				#set( $foo = "statevariable_" + $par.type +  "_"+ $child2.name +  "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
				$foo
			#end

			##StateVariable
			#foreach ($par in $child2.state)
				#set( $foo = "statevariable_" + $par.type +  "_"+ $child2.name +  "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
				$foo
			#end
			
				#foreach ($child3 in $child2.Children)
				
					##Parameters
					#foreach ($par in $child3.parameters)
						#set( $foo = "param_" + $par.type +  "_"+ $child2.name +"_" + $child3.name + "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
						$foo
					#end
				
					##Exposures
					#foreach ($par in $child3.exposures)
						#set( $foo = "exposure_" + $par.type +  "_"+ $child2.name +"_"+ $child3.name + "_" + $par.name + " : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
						$foo
					#end

					##StateVariable
					#foreach ($par in $child3.state)
						#set( $foo = "statevariable_" + $par.type +  "_"+ $child2.name +"_"+ $child3.name +  "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
						$foo
					#end

					##StateVariable
					#foreach ($par in $child3.state)
						#set( $foo = "statevariable_" + $par.type +  "_"+ $child2.name + "_"+ $child3.name +  "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
						$foo
					#end
					
						#foreach ($child4 in $child3.Children)
						
							##Parameters
							#foreach ($par in $child4.parameters)
								#set( $foo = "param_" + $par.type +  "_"+ $child2.name +"_" + $child3.name + "_"+ $child4.name + "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
								$foo
							#end
						
							##Exposures
							#foreach ($par in $child4.exposures)
								#set( $foo = "exposure_" + $par.type +  "_"+ $child2.name +"_"+ $child3.name + "_"+ $child4.name + "_" + $par.name + " : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
								$foo
							#end

							##StateVariable
							#foreach ($par in $child4.state)
								#set( $foo = "statevariable_" + $par.type +  "_"+ $child2.name +"_"+ $child3.name + "_"+ $child4.name +  "_" + $par.name + "_out : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
								$foo
							#end

							##StateVariable
							#foreach ($par in $child4.state)
								#set( $foo = "statevariable_" + $par.type +  "_"+ $child2.name + "_"+ $child3.name + "_"+ $child4.name +  "_" + $par.name + "_in : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
								$foo
							#end
						#end
					
				#end
		#end
		   
##System Parameters
           sysparam_time_timestep : in sfixed (-6 downto -22);
           sysparam_time_simtime : in sfixed (6 downto -22)
		   );
end component;


##Exposure Signals
#foreach ($par in $child.exposures)
#set( $foo = "signal exposure_" + $par.type +  "_" + $child.name + "_" + $par.name + "_internal : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#end


##StateVariable
#foreach ($par in $child.exposures)
#set( $foo = "signal statevariable_" + $par.type +  "_" + $child.name +  "_" + $par.name + "_out_int : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#end

##StateVariable
#foreach ($par in $child.exposures)
#set( $foo = "signal statevariable_" + $par.type +  "_" + $child.name +  "_" + $par.name + "_in_int  : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#end





#end



--------------------------------------------------------------------------------------------------


