######################################################
### Template for SOM-VHDL codegen.                 ###
### This is work in progress. Expect major changes.###
######################################################







------------------------------------------------------------------------------------------------------
-- Output  Ports Drivers
------------------------------------------------------------------------------------------------------
##process to drive each state variable
#set( $i = 0)
#foreach ($par in $eventports)
#if ($par.direction == "out")
---------------------------------------------------------------------
-- Eventport: $par.name Driver Process
---------------------------------------------------------------------
#set( $sensitivityList = "sysparam_time_timestep"  )
#set( $finalEventPort = "eventport_" + $par.direction + "_" + $par.name + "_internal <= "  )


#foreach ($event in $events)
#if ($event.effect.events.get($par.name))
#set( $sensitivityList = $sensitivityList + ", eventport_in_" + $event.name  )
#end
#end

#foreach ($event in $conditions)
#if ($event.effect.events.get($par.name))
#set( $sensitivityList = $sensitivityList + "," + $event.SENSITIVITYLIST )
#end
#end


#foreach ($regime in $regimes) 
	#foreach ($event in $regime.events)
		#if ($event.effect.events.get($par.name))
		#set( $sensitivityList = $sensitivityList + ", eventport_in_" + $event.name  )
		#end
	#end

	#foreach ($event in $regime.conditions)
		#if ($event.effect.events.get($par.name))
		#set( $sensitivityList = $sensitivityList + "," + $event.SENSITIVITYLIST )
		#end
	#end
#end

eventport_driver$i :process ( $sensitivityList )


## FIRST CREATE THE TEMP SIGNALS
#set( $temps = 1)


#foreach ($event in $events)
#if ($event.effect.events.get($par.name))
#set( $foo = "variable eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps + " : std_logic);"  )
#if ($temps > 1)
#set( $finalEventPort =  $finalEventPort + " || ");
#end
#set( $finalEventPort =  $finalEventPort + "eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps  )
$foo
#set( $sensitivityList = $sensitivityList + ",eventport_" + $par.direction + "_temp_" + $temps + ",eventport_in_" + $event.name  )
#set( $temps = $temps + 1)
#end
#end



#foreach ($event in $conditions)
#if ($event.effect.events.get($par.name))
#set( $foo = "variable eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps + " : std_logic;"  )
#if ($temps > 1)
#set( $finalEventPort =  $finalEventPort + " || ");
#end
#set( $finalEventPort =  $finalEventPort + "eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps  )
$foo
#set( $sensitivityList = $sensitivityList + ",eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps  )
#set( $temps = $temps + 1)
#end
#end


#foreach ($regime in $regimes) 

#foreach ($event in $regime.events)
#if ($event.effect.events.get($par.name))
#set( $foo = "variable eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps + " : std_logic);"  )
#if ($temps > 1)
#set( $finalEventPort =  $finalEventPort + " || ");
#end
#set( $finalEventPort =  $finalEventPort + "eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps  )
$foo
#set( $sensitivityList = $sensitivityList + ",eventport_" + $par.direction + "_temp_" + $temps + ",eventport_in_" + $event.name  )
#set( $temps = $temps + 1)
#end
#end



#foreach ($event in $regime.conditions)
#if ($event.effect.events.get($par.name))
#set( $foo = "variable eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps + " : std_logic;"  )
#if ($temps > 1)
#set( $finalEventPort =  $finalEventPort + " || ");
#end
#set( $finalEventPort =  $finalEventPort + "eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps  )
$foo
#set( $sensitivityList = $sensitivityList + ",eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps  )
#set( $temps = $temps + 1)
#end
#end

#end



begin
#set( $temps2 = 1)


##check for regimes

#foreach ($regime in $regimes) 


##then check for all events that drive this state
#foreach ($event in $regime.events)
#if ($event.effect.events.get($par.name))
#set( $foo = "eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps2 + " := resize(" + $event.effect.state.get($par.name).replace($rep,$repWith) + "," + $par.integer + "," + $par.fraction + ");"  )
#set( $foo2 = "eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps2 + " := statevariable_" + $par.type +  "_" + $par.name + "_temp_" + ($temps2 - 1) + ";" )
if ( current_regime_in_int = $regime.name ) and eventport_in_$event.name = '1' then
	$foo
else
	$foo2
end if;
#set( $temps2 = $temps2 + 1)
#end
#end

##then check for all conditional events that drive this state
#foreach ($event in $regime.conditions)
#if ($event.effect.events.get($par.name))
#set( $foo = "eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps2  )
if ( current_regime_in_int = $regime.name ) and $event.condition  then
	$foo := '1';
else
	$foo := '0';
end if;
#set( $temps2 = $temps2 + 1)
#end
#end


#end

##then check for all events that drive this state
#foreach ($event in $events)
#if ($event.effect.events.get($par.name))
#set( $foo = "eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps2 + " := resize(" + $event.effect.state.get($par.name).replace($rep,$repWith) + "," + $par.integer + "," + $par.fraction + ");"  )
#set( $foo2 = "eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps2 + " := statevariable_" + $par.type +  "_" + $par.name + "_temp_" + ($temps2 - 1) + ";" )
if eventport_in_$event.name = '1' then
	$foo
else
	$foo2
end if;
#set( $temps2 = $temps2 + 1)
#end
#end


##then check for all conditional events that drive this state
#foreach ($event in $conditions)
#if ($event.effect.events.get($par.name))
#set( $foo = "eventport_" + $par.direction +  "_" + $par.name + "_temp_" + $temps2  )
if $event.condition then
	$foo := '1';
else
	$foo := '0';
end if;
#set( $temps2 = $temps2 + 1)
#end
#end
#if ($temps == 0 && $temps2 == 0)
#set( $finalEventPort =  $finalEventPort + " '0' ")
#end

$finalEventPort ; 
end process;
#set( $i = $i + 1)
---------------------------------------------------------------------
#end
#end

------------------------------------------------------------------------------------------------------







---------------------------------------------------------------------
-- Assign state variables to exposures
---------------------------------------------------------------------
##Asign Exposures to State Variables
#foreach ($par in $state)
#if ($par.exposure.length() > 0)
#set( $foo = "exposure_" + $par.type +  "_" + $par.exposure + " <= statevariable_" + $par.type + "_" + $par.name + "_in;"  )
$foo 
#end
#end
---------------------------------------------------------------------


---------------------------------------------------------------------
-- Assign state variables to output state variables
---------------------------------------------------------------------
##Asign Exposures to State Variables
#foreach ($par in $state)
#set( $foo = "statevariable_" + $par.type +  "_" + $par.name + "_out <= statevariable_" + $par.type + "_" + $par.name + "_next;"  )
$foo 
#end
---------------------------------------------------------------------


---------------------------------------------------------------------
-- Assign derived variables to exposures
---------------------------------------------------------------------
##Asign Exposures to Derived Variables
#foreach ($par in $derivedvariables)
#if ($par.exposure.length() > 0)
#set( $foo = "exposure_" + $par.type +  "_" + $par.exposure + " <= derivedvariable_" + $par.type + "_" + $par.name + "_in;"  )
$foo 
#set( $foo = "derivedvariable_" + $par.type + "_" + $par.name + "_out <= derivedvariable_" + $par.type + "_" + $par.name + ";"  )
$foo 
#end
#end
#foreach ($par in $conditionalderivedvariables)
#if ($par.exposure.length() > 0)
#set( $foo = "exposure_" + $par.type +  "_" + $par.exposure + " <= derivedvariable_" + $par.type + "_" + $par.name + "_in;"  )
$foo 
#set( $foo = "derivedvariable_" + $par.type + "_" + $par.name + "_out <= derivedvariable_" + $par.type + "_" + $par.name + ";"  )
$foo 
#end
#end
---------------------------------------------------------------------



---------------------------------------------------------------------
-- Subprocess ready process
---------------------------------------------------------------------

subprocess_all_ready_process: process(subprocess_der_int_ready,subprocess_der_int_pre_ready,subprocess_der_ready,subprocess_dyn_int_pre_ready,subprocess_dyn_int_ready,subprocess_dyn_ready,subprocess_model_ready)
begin
if subprocess_der_int_ready = '1'  and subprocess_der_int_pre_ready = '1'and subprocess_der_ready ='1' and subprocess_dyn_int_ready = '1' and subprocess_dyn_int_pre_ready = '1' and subprocess_dyn_ready = '1' and subprocess_model_ready = '1' then
subprocess_all_ready <= '1';
else
subprocess_all_ready <= '0';
end if;
end process subprocess_all_ready_process;
---------------------------------------------------------------------


count_proc:process(clk)
  	begin 
  		if (clk'EVENT AND clk = '1') then
			if step_once_go = '1' then
  				COUNT <= "000";
				component_done_int <= '0';
  			elsif COUNT = "001" then
				component_done_int <= '1';
			elsif subprocess_all_ready = '1' then
  				COUNT <= COUNT + 1;
				component_done_int <= '0';
			end if;
  		end if;
end process count_proc;


#if ($Children.size() == 0) ## if I dont have children
component_done <= component_done_int;
#else

#set( $foo = " ")
#foreach ($child in $Children)
#set( $foo = $foo  + $child.name + "_component_done,")
#end
#set( $foo2 = " ")
#set ($count = 0)
#foreach ($child in $Children)
#set( $foo2 = $foo2 + $child.name + "_component_done = '1'")
#set ($count = $count + 1)
#if ($count < $Children.size())
#set( $foo2 = $foo2 + " and ")
#end
#end
   



childrenCombined_component_done_process:process($foo CLK)
begin
if ($foo2) then
	childrenCombined_component_done <= '1';
else
	childrenCombined_component_done <= '0';
end if;
end process childrenCombined_component_done_process;


##childrenCombined_component_done_single_shot_process:process(CLK)
##begin
##if CLK'event and CLK ='1' then
##	if childrenCombined_component_done = '1' and childrenCombined_component_done_single_shot_fired = '0' then
##		childrenCombined_component_done_single_shot <= '1'
##		childrenCombined_component_done_single_shot_fired <= '1'
##	elsif childrenCombined_component_done = '0' then
##		childrenCombined_component_done_single_shot_fired <= '0'
##	else
##		childrenCombined_component_done_single_shot <= '0'
##	end if;
##end if;
##end process childrenCombined_component_done_single_shot_process;



##count_proc:process(clk)
##  	begin 
##  		if (clk'EVENT AND clk = '1') then
##			if childrenCombined_component_done_single_shot = '1' then
##  				COUNT <= "000";
##				component_done <= '0';
##  			elsif COUNT = "011" then
##				component_done <= '1';
##			else
##  				COUNT <= COUNT + 1;
##			end if;
##  		end if;
##end process count_proc;

component_done <= component_done_int and childrenCombined_component_done;



#end
		
		
		
#if ($name.contains("neuron_model"))
---------------------------------------------------------------------
-- Control the done signal
---------------------------------------------------------------------

step_once_complete_synch:process(clk)
  	begin 
  		if (clk'EVENT AND clk = '1') then
		
		if component_done = '1' and step_once_complete_fired = '0'  then
			step_once_complete <= '1';
			step_once_complete_fired <= '1';
---------------------------------------------------------------------
-- Assign event ports to exposures
---------------------------------------------------------------------
##Assign internal variables to EventPorts
#foreach ($par in $eventports)
#if ($par.direction == "out")
#set( $foo = "eventport_" + $par.direction +  "_" + $par.name + " <=  eventport_" + $par.direction + "_" + $par.name + "_internal ;"  )
$foo 
#end
#end
---------------------------------------------------------------------
	elsif component_done = '0' then
			step_once_complete <= '0';
			step_once_complete_fired <= '0';
		
---------------------------------------------------------------------
-- Assign event ports to exposures
---------------------------------------------------------------------
##Assign internal variables to EventPorts
#foreach ($par in $eventports)
#if ($par.direction == "out")
#set( $foo = "eventport_" + $par.direction +  "_" + $par.name + " <=  '0';"  )
$foo 
#end
#end
---------------------------------------------------------------------
		
	else
		step_once_complete <= '0';
		
---------------------------------------------------------------------
-- Assign event ports to exposures
---------------------------------------------------------------------
##Assign internal variables to EventPorts
#foreach ($par in $eventports)
#if ($par.direction == "out")
#set( $foo = "eventport_" + $par.direction +  "_" + $par.name + " <=  '0';"  )
$foo 
#end
#end
---------------------------------------------------------------------
		
		end if;
	end if;
  	end process step_once_complete_synch;
---------------------------------------------------------------------
#end


end RTL;
