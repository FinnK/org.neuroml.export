######################################################
### Template for SOM-VHDL codegen.                 ###
### This is work in progress. Expect major changes.###
######################################################

###################################################################
###################################################################
-- VHDL script automatically generated from a LEMS/SEM description
###################################################################
###################################################################


###################################################################
-- Standard Library Bits
###################################################################

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
library ieee_proposed;
use ieee_proposed.fixed_pkg.all;
use ieee_proposed.fixed_float_types.ALL;
use std.textio.all;
use ieee.std_logic_textio.all; -- if you're saving this type of signal
entity tb_simulation is
end tb_simulation;

###################################################################
###################################################################

architecture tb of tb_simulation is

FILE test_out_data: TEXT open WRITE_MODE is "output.txt";

## Go through each component and gets it definition here

#foreach ($neuron in $NeuronComponents)

component $neuron.name
    Port ( clk : in STD_LOGIC;
           rst : in STD_LOGIC;
           ce : in STD_LOGIC;
		   
##Event Ports
    #foreach ($par in $neuron.eventports)
		#set( $foo = "eventport_" + $par.direction +  "_" + $par.name + " : " + $par.direction + " STD_LOGIC;"  )
		$foo
	#end

##Parameters
	#foreach ($par in $neuron.parameters)
		#set( $foo = "param_" + $par.type +  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##Exposures
	#foreach ($par in $neuron.exposures)
		#set( $foo = "exposure_" + $par.type +  "_" + $par.name + " : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
		   
##System Parameters
           sysparam_time_timestep : sfixed (0 downto -22)-- := to_sfixed(0.001,10,-54)
		   );
end component;
#end

##Internal TestbenchSignals - all events and exposures of all instantiated neurons

	signal spikesIn 	: std_logic;
	signal spikesOut 	: std_logic;
	signal clk 			: std_logic := '0';
	signal rst 			: std_logic := '1';
	signal ce 			: std_logic := '1';
	signal v_ac 		: sfixed(10 downto -54);
	signal v_fk 		: sfixed(10 downto -54);
	signal v_fk2		: sfixed (2 downto -14);
	signal v_iaf_cell_2		: sfixed (2 downto -14);
	signal ClockCount 	: std_logic_vector(2 downto 0);
	signal Errors		: integer;
	
	
##Timescale becomes the timestep - stored in DT


##Start and end times - stored in SIMLENGTH

begin

##instantiate each neuron

#foreach ($neuron in $NeuronComponents)

$neuron.name : iaf_cell_fk2
		port map (
			eventport_in_spikesIn => spikesIn,
			clk => clk,
			rst => rst,
			ce => ce,
			exposure_voltage_v => v_fk2,
			param_voltage_threshold => to_sfixed(-0.030,2,-14),
			param_time_refractoryPeriod => to_sfixed(0.004,0,-22),
			param_capacitance_capacitance => to_sfixed(0.000000000001,-31,-47),
			param_conductance_leakConductance => to_sfixed(0.000000000050,-29,-45),
			param_voltage_leakReversal => to_sfixed(-0.050,2,-14),
			param_voltage_deltaV => to_sfixed(0.010,2,-14),
			sysparam_time_timestep => to_sfixed(0.001,0,-22));
			
#end



	--
	-- Instantiate multiple versions of the cell with the same inputs.
	-- Ideally the outputs should be the same too.
	--
	dut_ac : iaf_cell_ac	-- Aedan's version.
		port map (
			spikesIn => spikesIn,
			clk => clk,
			rst => rst,
			ce => ce,
			v => v_ac);
			
	dut_fk2 : iaf_cell_fk2
		port map (
			eventport_in_spikesIn => spikesIn,
			clk => clk,
			rst => rst,
			ce => ce,
			exposure_voltage_v => v_fk2,
			param_voltage_threshold => to_sfixed(-0.030,2,-14),
			param_time_refractoryPeriod => to_sfixed(0.004,0,-22),
			param_capacitance_capacitance => to_sfixed(0.000000000001,-31,-47),
			param_conductance_leakConductance => to_sfixed(0.000000000050,-29,-45),
			param_voltage_leakReversal => to_sfixed(-0.050,2,-14),
			param_voltage_deltaV => to_sfixed(0.010,2,-14),
			sysparam_time_timestep => to_sfixed(0.001,0,-22));
			
			
	process
    begin
		rst <= '1';
		wait for 1 us;
		Rst <= '0';
        -- EDIT
        Wait;
    end process;
	
	clk <= not(clk) after 10 ns;
	
	
	--
	-- Print the results at each clock tick.
	--
	process(clk)
	variable L1              : LINE;
	begin
		if (clk'event and clk = '1') then
			--report  "Clock edge, v_fk2=" & real'image(r_v_fk2) severity Note;
			report "v_iaf_cell_2=" & real'image(to_real(v_iaf_cell_2)) severity Note;
			write(L1, real'image(to_real(v_iaf_cell_2)));  -- nth value in row
			writeline(test_out_data, L1); -- write row to output file
		end if;
	end process;

end tb;

###################################################################
###################################################################
