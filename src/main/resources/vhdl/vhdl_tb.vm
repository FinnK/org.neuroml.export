######################################################
### Template for SOM-VHDL codegen.                 ###
### This is work in progress. Expect major changes.###
######################################################

###################################################################
###################################################################
-- VHDL script automatically generated from a LEMS/SEM description
###################################################################
###################################################################


###################################################################
-- Standard Library Bits
###################################################################

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
library ieee_proposed;
use ieee_proposed.fixed_pkg.all;
use ieee_proposed.fixed_float_types.ALL;
use std.textio.all;
use ieee.std_logic_textio.all; -- if you're saving this type of signal
entity tb_simulation is
end tb_simulation;

###################################################################
###################################################################

architecture tb of tb_simulation is

FILE test_out_data: TEXT open WRITE_MODE is "VHDLoutput.txt";

## Go through each component and gets it definition here

#foreach ($neuron in $NeuronComponents)

component $neuron.name
    Port ( clk : in STD_LOGIC;
           rst : in STD_LOGIC;
           ce : in STD_LOGIC;
		   
##Event Ports
    #foreach ($par in $neuron.eventports)
		#set( $foo = "eventport_" + $par.direction +  "_" + $par.name + " : " + $par.direction + " STD_LOGIC;"  )
		$foo
	#end

##Parameters
	#foreach ($par in $neuron.parameters)
		#set( $foo = "param_" + $par.type +  "_" + $par.name + " : in sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end

##Exposures
	#foreach ($par in $neuron.exposures)
		#set( $foo = "exposure_" + $par.type +  "_" + $par.name + " : out sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
		$foo
	#end
		   
##System Parameters
           sysparam_time_timestep : sfixed (0 downto -22);
           sysparam_time_simtime : sfixed (0 downto -22)
		   );
end component;
#end

##Internal TestbenchSignals - all events and exposures of all instantiated neurons

	signal clk 			: std_logic := '0';
	signal rst 			: std_logic := '1';
	signal ce 			: std_logic := '1';
	signal sysparam_time_simtime  : sfixed ( 0 downto -22) := to_sfixed (0.0,0 , -22);
	signal Errors		: integer;
	signal sysparam_time_timestep : sfixed (0 downto -22) := to_sfixed( $dt ,0,-22);
#foreach ($child in $NeuronComponents)
##Exposure Signals
#foreach ($par in $child.exposures)
	#set( $foo = "signal " + $child.name + "_exposure_" + $par.type +  "_" + $par.name + " : sfixed (" + $par.integer + " downto " + $par.fraction + ");"  )
$foo
#end

##EventPorts
#foreach ($par in $child.eventports)
	#set( $foo = "signal " + $child.name + "_eventport_" + $par.direction + "_" + $par.name + "_internal : std_logic; ")
$foo
#end

#end	

	
	
##Timescale becomes the timestep - stored in DT

##Start and end times - stored in SIMLENGTH

begin

##instantiate each neuron

#foreach ($child in $NeuronComponents)
#set( $foo = $child.name + "_uut")
$foo : $child.name
    port map (	clk => clk,
				rst => rst,
				ce => ce,
		   
##Event Ports
    #foreach ($par in $child.eventports)
		#set( $foo = "eventport_" + $par.direction +  "_" + $par.name + " => " + $child.name + "_eventport_" + $par.direction + "_" + $par.name + "_internal ,"  )
		$foo
	#end

##Parameters
	#foreach ($par in $child.parameters)
		#set( $foo = "param_" + $par.type +  "_" + $par.name + " => to_sfixed (" + $par.value + "," + $par.integer + " , " + $par.fraction + "),"  )
		$foo
	#end

##Exposures
	#foreach ($par in $child.exposures)
		#set( $foo = "exposure_" + $par.type +  "_" + $par.name + " => " + $child.name + "_exposure_" + $par.type +  "_" + $par.name + "," )
		$foo
	#end
		   
##System Parameters
           sysparam_time_timestep => sysparam_time_timestep,
           sysparam_time_simtime => sysparam_time_simtime
		   );
		

#end


#foreach ($connection in $Connections)
#foreach ($eventportS in $connection.Source.eventports)
#if ($eventportS.direction == "out")
#foreach ($eventportT in $connection.Target.eventports)
#if ($eventportT.direction == "in")
#set ( $foo =  $connection.Target.Name + "_eventport_in_" + $eventportT.name + "_internal <= " + $connection.Source.Name + "_eventport_out_" + $eventportS.name + "_internal;")
$foo
#end
#end
#end
#end
#end

	process
	variable L1              : LINE;
    begin
	write(L1, "SimulationTime " );
	#foreach ($child in $NeuronComponents)
		#foreach ($par in $child.exposures)
				#set( $foo = $child.name + "_exposure_" + $par.type +  "_" + $par.name  )
				write(L1, "$foo" );
				write(L1, " ");
		#end
	#end
				writeline(test_out_data, L1); -- write row to output file
		rst <= '1';
		wait for 20 ns;
		rst <= '0';
        -- EDIT
        Wait;
    end process;
	
	clk <= not(clk) after 10 ns;
	
	
	--
	-- Print the results at each clock tick.
	--
	process(clk)
	variable L1              : LINE;
	begin
		if (rst = '1') then
		
				sysparam_time_simtime <= to_sfixed (0.0,0, -22);
		else
			if (clk'event and clk = '1') then
				sysparam_time_simtime <= resize(sysparam_time_simtime + sysparam_time_timestep,0, -22);
				write(L1, real'image(to_real( sysparam_time_simtime )));  -- nth value in row
						write(L1, " ");
			#foreach ($child in $NeuronComponents)
				#foreach ($par in $child.exposures)
						#set( $foo = $child.name + "_exposure_" + $par.type +  "_" + $par.name  )
						write(L1, real'image(to_real( $foo )));  -- nth value in row
						write(L1, " ");
				#end
			#end
				
				writeline(test_out_data, L1); -- write row to output file
			end if;
		end if;
	end process;

end tb;

###################################################################
###################################################################
