package org.neuroml.export;

import java.io.File;
import java.io.IOException;

import org.lemsml.jlems.core.expression.ParseError;
import org.lemsml.jlems.core.run.ConnectionError;
import org.lemsml.jlems.core.run.RuntimeError;
import org.lemsml.jlems.core.sim.ContentError;
import org.lemsml.jlems.core.sim.ParseException;
import org.lemsml.jlems.core.sim.Sim;
import org.lemsml.jlems.core.type.BuildException;
import org.lemsml.jlems.core.xml.XMLException;
import org.lemsml.jlems.io.reader.JarResourceInclusionReader;
import org.lemsml.jlems.io.util.FileUtil;
import org.neuroml.model.util.NeuroMLConverter;
import org.neuroml.model.util.NeuroMLElements;
import org.lemsml.jlems.core.logging.E;

public class Utils {

	public static String getHeaderComment(String format) {
		String commentString = "    This "+format+" file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)\n" +
    			"         org.neuroml.export  v"+Main.ORG_NEUROML_EXPORT_VERSION+"\n" +
                "         org.neuroml.model   v"+NeuroMLElements.ORG_NEUROML_MODEL_VERSION+"\n" +
                "         jLEMS               v"+org.lemsml.jlems.io.Main.VERSION;
		return commentString;
	}

	public static Sim readLemsNeuroMLFile(String contents) throws ContentError, ParseError, ParseException, BuildException, XMLException, ConnectionError, RuntimeError {

		JarResourceInclusionReader.addSearchPathInJar("/NeuroML2CoreTypes");
		JarResourceInclusionReader.addSearchPathInJar("/");
		
		JarResourceInclusionReader jrir = new JarResourceInclusionReader(contents);
		
        Sim sim = new Sim(jrir.read());
            
        sim.readModel();
    	return sim;
		
	}
	
    

	public static Sim readNeuroMLFile(File f) throws ContentError, ParseError, ParseException, BuildException, XMLException, ConnectionError, RuntimeError, IOException {

		JarResourceInclusionReader.addSearchPathInJar("/NeuroML2CoreTypes");
		JarResourceInclusionReader.addSearchPath(f.getParentFile());
		
		E.info("Reading from: "+f.getAbsolutePath());

    	String nml = FileUtil.readStringFromFile(f);
    	
    	String nmlLems = NeuroMLConverter.convertNeuroML2ToLems(nml);
		
		JarResourceInclusionReader jrir = new JarResourceInclusionReader(nmlLems);
		
        Sim sim = new Sim(jrir.read());
            
        sim.readModel();
    	return sim;
		
	}
	public static Sim readLemsNeuroMLFile(File f) throws ContentError, ParseError, ParseException, BuildException, XMLException, ConnectionError, RuntimeError {

		JarResourceInclusionReader.addSearchPathInJar("/NeuroML2CoreTypes");
		JarResourceInclusionReader.addSearchPath(f.getParentFile());
		
		E.info("Reading from: "+f.getAbsolutePath());
		
		JarResourceInclusionReader jrir = new JarResourceInclusionReader(f);
		
        Sim sim = new Sim(jrir.read());
            
        sim.readModel();
    	return sim;
		
	}

    public static String replaceInExpression(String expression, String oldVal, String newVal) {
    	expression = " "+expression+" ";
    	String[] pres = new String[]{"\\(","\\+","-","\\*","/","\\^", " "};
        String[] posts = new String[]{"\\)","\\+","-","\\*","/","\\^", " "};

        for(String pre: pres){
            for(String post: posts){
                String o = pre+oldVal+post;
                String n = pre+" "+newVal+" "+post;
	                //E.info("Replacing "+o+" with "+n+": "+formula);
                //if (formula.indexOf(o)>=0) {
                expression = expression.replaceAll(o, n);
                //}
            }
        }
        return expression.trim();
    }

    /*
	
 	private static String toRegexp(String s){
	   if (s.equals("(") || s.equals("+") || s.equals("*") || s.equals("^"))
		   return "\\"+s;
	   return s;
   	}
    public static String replaceInFunction(String expr, String oldVar, String newVar) {
        String orig = new String(expr);

        if (expr.trim().equals(oldVar)) {
            return newVar;
        }

        //String new_ = toReplace.get(old);
        String[] pres = new String[]{"(", "+", "-", "*", "/", "^", " ", "<", ">"};
        String[] posts = new String[]{")", "+", "-", "*", "/", "^", " ", "<", ">"};

        for (String pre : pres) {
            for (String post : posts) {

                String o = pre + oldVar + post;
                String n = pre + " " + newVar + " " + post;

                String o_regexp = toRegexp(pre) + oldVar + toRegexp(post);

                E.info("Replacing "+o+" with "+n+" in "+expr+" [using reg exp: "+o_regexp+"]");
                expr = expr.replaceAll(toRegexp(o), n);
            }
        }
        expr = expr.trim();

        for (String pre : pres) {
            String o = pre + oldVar;
            String n = pre + " " + newVar;

            E.info("Checking ending "+o);
            if (expr.endsWith(o)) {
                expr = expr.substring(0, expr.length() - o.length()) + n;
            }
        }
        for (String post : posts) {
            String o = oldVar + post;
            String n = newVar + " " + post;
            E.info("Checking starting "+o);
            if (expr.startsWith(o)) {
                expr = n + expr.substring(o.length());
            }
        }

        expr = expr.replaceAll("  ", " ");

        if (!expr.equals(orig)) {
            //E.info("----------  Changed "+orig+" to "+ expr);
        }
        return expr;
    }*/
    

    public static void main(String[] args) throws Exception {
    	
    	String expr = "q+instances";
    	E.info("Replaced "+expr+" with "+replaceInExpression(expr, "q", "gg"));
    }

}
